package om.example.getitnow.swing;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import om.example.getitnow.swing.model.Driver;

import javax.swing.*;
import javax.swing.plaf.FontUIResource; // üëà 1. Import ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏ô‡∏ï‡πå
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Enumeration; // üëà 2. Import ‡∏ï‡∏±‡∏ß‡∏ß‡∏ô‡∏•‡∏π‡∏õ
import java.util.List;

public class MainFrame extends JFrame {

    // (‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    private DefaultTableModel tableModel;
    private JTable driverTable;
    private JButton refreshButton;
    private final HttpClient httpClient = HttpClient.newHttpClient();
    private final Gson gson = new Gson();

    // (Constructor... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    public MainFrame() {
        setTitle("GetItNow - Admin Dashboard");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        String[] columnNames = {"ID", "‡∏ä‡∏∑‡πà‡∏≠", "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"};
        tableModel = new DefaultTableModel(columnNames, 0);
        driverTable = new JTable(tableModel);
        refreshButton = new JButton("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö (Refresh)");

        refreshButton.addActionListener(e -> {
            loadDriverData(); 
        });

        Container pane = getContentPane();
        pane.setLayout(new BorderLayout());
        pane.add(new JScrollPane(driverTable), BorderLayout.CENTER);
        pane.add(refreshButton, BorderLayout.SOUTH);
    }

    // (‡πÄ‡∏°‡∏ò‡∏≠‡∏î loadDriverData()... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    private void loadDriverData() {
        refreshButton.setText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...");
        refreshButton.setEnabled(false); 

        SwingWorker<List<Driver>, Void> worker = new SwingWorker<>() {
            
            @Override
            protected List<Driver> doInBackground() throws Exception {
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create("http://localhost:8080/api/drivers")) 
                        .GET()
                        .build();
                HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                TypeToken<List<Driver>> token = new TypeToken<>() {};
                return gson.fromJson(response.body(), token.getType());
            }

            @Override
            protected void done() {
                try {
                    List<Driver> drivers = get(); 
                    tableModel.setRowCount(0); 
                    for (Driver driver : drivers) {
                        tableModel.addRow(new Object[]{
                            driver.getId(),
                            driver.getFirstName(),
                            driver.getLastName(),
                            driver.getLicensePlate(),
                            driver.isAvailable() ? "‡∏ß‡πà‡∏≤‡∏á" : "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á"
                        });
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(MainFrame.this,
                            "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: " + e.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    refreshButton.setText("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö (Refresh)");
                    refreshButton.setEnabled(true);
                }
            }
        };
        worker.execute();
    }

    // --- ‡πÄ‡∏°‡∏ò‡∏≠‡∏î 'main' (‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°) ---
    public static void main(String[] args) {
        
        // --- 3. ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏Å‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ---
        try {
            // 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Look and Feel (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤) ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡πÄ‡∏ä‡πà‡∏ô Windows)
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

            // 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ "Tahoma" ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÉ‡∏ô Windows)
            Font thaiFont = new FontUIResource("Tahoma", Font.PLAIN, 14); // 14 ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î

            // 3. ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏õ‡∏∏‡πà‡∏°, ‡∏ï‡∏≤‡∏£‡∏≤‡∏á, ‡∏•‡∏≤‡πÄ‡∏ö‡∏• ‡∏Ø‡∏•‡∏Ø) ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ
            Enumeration<Object> keys = UIManager.getDefaults().keys();
            while (keys.hasMoreElements()) {
                Object key = keys.nextElement();
                Object value = UIManager.get(key);
                if (value instanceof FontUIResource) {
                    UIManager.put(key, thaiFont);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        // --- ‡∏à‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏Å‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå ---


        // ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°: ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô MainFrame
        SwingUtilities.invokeLater(() -> {
            MainFrame frame = new MainFrame();
            frame.setVisible(true);
        });
    }
}