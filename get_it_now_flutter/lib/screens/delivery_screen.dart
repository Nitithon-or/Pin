import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart'; // 1. Import Google Maps
import 'package:http/http.dart' as http; // 2. Import http
import 'dart:convert'; // 3. Import jsonEncode

class DeliveryScreen extends StatefulWidget {
  // 4. ‡∏£‡∏±‡∏ö userId ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å HomeScreen
  final String username;
  final int userId; 

  const DeliveryScreen({super.key, required this.username, required this.userId});

  @override
  State<DeliveryScreen> createState() => _DeliveryScreenState();
}

class _DeliveryScreenState extends State<DeliveryScreen> {
  // --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ---
  GoogleMapController? mapController;
  
  // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û)
  static const CameraPosition initialCameraPosition = CameraPosition(
    target: LatLng(13.7563, 100.5018), 
    zoom: 14,
  );

  LatLng? pickupLocation;
  LatLng? dropoffLocation;
  bool isSelectingPickup = true; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö (true) ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á (false)
  final Set<Marker> markers = {};
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  final _descriptionController = TextEditingController(); 
  bool _isLoading = false;

  String get _baseUrl {
    // üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å URL ‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ
    // return 'http://10.0.2.2:8080'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android Emulator
    return 'http://localhost:8080'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chrome (Web)
  }

  void _onMapCreated(GoogleMapController controller) {
    mapController = controller;
  }

  void _onTap(LatLng point) {
    setState(() {
      // 5. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
      if (isSelectingPickup) {
        pickupLocation = point;
      } else {
        dropoffLocation = point;
      }
      
      // 6. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Markers
      markers.clear();
      if (pickupLocation != null) {
        markers.add(Marker(
          markerId: const MarkerId('pickup'),
          position: pickupLocation!,
          infoWindow: const InfoWindow(title: '‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö'),
          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueGreen),
        ));
      }
      if (dropoffLocation != null) {
        markers.add(Marker(
          markerId: const MarkerId('dropoff'),
          position: dropoffLocation!,
          infoWindow: const InfoWindow(title: '‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á'),
          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        ));
      }
    });
  }

  // 7. ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏¥‡∏á API ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è
  Future<void> _submitOrder() async {
    if (pickupLocation == null || dropoffLocation == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö'), backgroundColor: Colors.red),
      );
      return;
    }

    setState(() { _isLoading = true; });

    const url = '/api/orders'; 

    try {
      // 8. ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Spring Boot
      final body = jsonEncode({
        'user': {'id': widget.userId}, // ‡∏™‡πà‡∏á User ID ‡∏ó‡∏µ‡πà Login ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        'serviceType': '‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á', 
        'status': 'searching', 
        
        // 9. ‡∏™‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î Lat/Lng ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        'pickupLocation': 'Lat: ${pickupLocation!.latitude.toStringAsFixed(6)}, Long: ${pickupLocation!.longitude.toStringAsFixed(6)} (Details: ${_descriptionController.text})', 
        'dropoffLocation': 'Lat: ${dropoffLocation!.latitude.toStringAsFixed(6)}, Long: ${dropoffLocation!.longitude.toStringAsFixed(6)}',
        
        'totalPrice': 0.00, 
      });

      final response = await http.post(
        Uri.parse('$_baseUrl$url'), // 10. ‡∏¢‡∏¥‡∏á API
        headers: {'Content-Type': 'application/json'},
        body: body,
      );

      if (!context.mounted) return;

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö...'), backgroundColor: Colors.green),
        );
        Navigator.of(context).pop(); 
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.body}'), backgroundColor: Colors.red),
        );
      }
    } catch (e) {
      if (!context.mounted) return;
       ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: $e'), backgroundColor: Colors.red),
        );
    }

    setState(() { _isLoading = false; });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          isSelectingPickup 
            ? '1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö (Pickup)' 
            : '2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á (Dropoff)'
        ),
      ),
      body: Stack(
        children: [
          // --- 11. GoogleMap ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠) ---
          GoogleMap(
            onMapCreated: _onMapCreated,
            initialCameraPosition: initialCameraPosition,
            onTap: _onTap, 
            markers: markers, 
            myLocationEnabled: true,
          ),
          
          // --- 12. ‡∏ß‡∏≤‡∏á UI ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (Floating UI) ---
          Positioned(
            top: 10,
            left: 10,
            right: 10,
            child: Card(
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  children: [
                    // --- ‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ---
                    TextField(
                      controller: _descriptionController,
                      decoration: const InputDecoration(
                        labelText: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á/‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (Optional)',
                        border: OutlineInputBorder(),
                        isDense: true,
                      ),
                      maxLines: 2,
                    ),
                    const SizedBox(height: 10),

                    // --- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---
                    Text(
                      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${isSelectingPickup ? '‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö' : '‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á'}',
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 5),
                    Text(
                      '‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö: ${pickupLocation != null ? '‚úÖ' : '‚ùå'} | ‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á: ${dropoffLocation != null ? '‚úÖ' : '‚ùå'}',
                      style: const TextStyle(fontSize: 12),
                    ),
                    const SizedBox(height: 10),

                    // --- ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ---
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        Expanded(
                          child: OutlinedButton(
                            onPressed: () {
                              setState(() {
                                isSelectingPickup = !isSelectingPickup;
                              });
                            },
                            child: Text(isSelectingPickup ? '‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á' : '‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö'),
                          ),
                        ),
                        const SizedBox(width: 10),
                        Expanded(
                          child: ElevatedButton(
                            onPressed: _submitOrder,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.green,
                              padding: const EdgeInsets.symmetric(vertical: 12),
                            ),
                            child: _isLoading 
                                ? const SizedBox(width: 20, height: 20, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2)) 
                                : const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå'),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}